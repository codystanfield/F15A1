DROP SEQUENCE F15A1_Auth_seq ; 
create sequence F15A1_Auth_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15A1_Auth_PK_trig 
before insert on F15A1_Auth
for each row 
begin 
select F15A1_Auth_seq.nextval into :new.auth_id from dual; 
end; 
/
alter table F15A1_Auth add created date ; 
alter table F15A1_Auth add created_by VARCHAR2 (255) ; 
alter table F15A1_Auth add row_version_number integer ; 
alter table F15A1_Auth add updated date ; 
alter table F15A1_Auth add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15A1_Auth_AUD_trig 
before insert or update on F15A1_Auth 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15A1_Comment_seq ; 
create sequence F15A1_Comment_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15A1_Comment_PK_trig 
before insert on F15A1_Comment
for each row 
begin 
select F15A1_Comment_seq.nextval into :new.comment_id from dual; 
end; 
/
alter table F15A1_Comment add created date ; 
alter table F15A1_Comment add created_by VARCHAR2 (255) ; 
alter table F15A1_Comment add row_version_number integer ; 
alter table F15A1_Comment add updated date ; 
alter table F15A1_Comment add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15A1_Comment_AUD_trig 
before insert or update on F15A1_Comment 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15A1_Hist_seq ; 
create sequence F15A1_Hist_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15A1_Hist_PK_trig 
before insert on F15A1_Hist
for each row 
begin 
select F15A1_Hist_seq.nextval into :new.hist_id from dual; 
end; 
/
alter table F15A1_Hist add created date ; 
alter table F15A1_Hist add created_by VARCHAR2 (255) ; 
alter table F15A1_Hist add row_version_number integer ; 
alter table F15A1_Hist add updated date ; 
alter table F15A1_Hist add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15A1_Hist_AUD_trig 
before insert or update on F15A1_Hist 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15A1_Lab_seq ; 
create sequence F15A1_Lab_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15A1_Lab_PK_trig 
before insert on F15A1_Lab
for each row 
begin 
select F15A1_Lab_seq.nextval into :new.lab_id from dual; 
end; 
/
alter table F15A1_Lab add created date ; 
alter table F15A1_Lab add created_by VARCHAR2 (255) ; 
alter table F15A1_Lab add row_version_number integer ; 
alter table F15A1_Lab add updated date ; 
alter table F15A1_Lab add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15A1_Lab_AUD_trig 
before insert or update on F15A1_Lab 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15A1_Stat_Code_seq ; 
create sequence F15A1_Stat_Code_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15A1_Stat_Code_PK_trig 
before insert on F15A1_Stat_Code
for each row 
begin 
select F15A1_Stat_Code_seq.nextval into :new.SC from dual; 
end; 
/
alter table F15A1_Stat_Code add created date ; 
alter table F15A1_Stat_Code add created_by VARCHAR2 (255) ; 
alter table F15A1_Stat_Code add row_version_number integer ; 
alter table F15A1_Stat_Code add updated date ; 
alter table F15A1_Stat_Code add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15A1_Stat_Code_AUD_trig 
before insert or update on F15A1_Stat_Code 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15A1_Task_seq ; 
create sequence F15A1_Task_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15A1_Task_PK_trig 
before insert on F15A1_Task
for each row 
begin 
select F15A1_Task_seq.nextval into :new.task_id from dual; 
end; 
/
alter table F15A1_Task add created date ; 
alter table F15A1_Task add created_by VARCHAR2 (255) ; 
alter table F15A1_Task add row_version_number integer ; 
alter table F15A1_Task add updated date ; 
alter table F15A1_Task add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15A1_Task_AUD_trig 
before insert or update on F15A1_Task 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15A1_contact_seq ; 
create sequence F15A1_contact_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15A1_contact_PK_trig 
before insert on F15A1_contact
for each row 
begin 
select F15A1_contact_seq.nextval into :new.contact_id from dual; 
end; 
/
alter table F15A1_contact add created date ; 
alter table F15A1_contact add created_by VARCHAR2 (255) ; 
alter table F15A1_contact add row_version_number integer ; 
alter table F15A1_contact add updated date ; 
alter table F15A1_contact add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15A1_contact_AUD_trig 
before insert or update on F15A1_contact 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15A1_doc_seq ; 
create sequence F15A1_doc_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15A1_doc_PK_trig 
before insert on F15A1_doc
for each row 
begin 
select F15A1_doc_seq.nextval into :new.doc_id from dual; 
end; 
/
alter table F15A1_doc add created date ; 
alter table F15A1_doc add created_by VARCHAR2 (255) ; 
alter table F15A1_doc add row_version_number integer ; 
alter table F15A1_doc add updated date ; 
alter table F15A1_doc add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15A1_doc_AUD_trig 
before insert or update on F15A1_doc 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15A1_emp_seq ; 
create sequence F15A1_emp_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15A1_emp_PK_trig 
before insert on F15A1_emp
for each row 
begin 
select F15A1_emp_seq.nextval into :new.emp_id from dual; 
end; 
/
alter table F15A1_emp add created date ; 
alter table F15A1_emp add created_by VARCHAR2 (255) ; 
alter table F15A1_emp add row_version_number integer ; 
alter table F15A1_emp add updated date ; 
alter table F15A1_emp add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15A1_emp_AUD_trig 
before insert or update on F15A1_emp 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15A1_rfe_seq ; 
create sequence F15A1_rfe_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15A1_rfe_PK_trig 
before insert on F15A1_rfe
for each row 
begin 
select F15A1_rfe_seq.nextval into :new.rfe_id from dual; 
end; 
/
alter table F15A1_rfe add created date ; 
alter table F15A1_rfe add created_by VARCHAR2 (255) ; 
alter table F15A1_rfe add row_version_number integer ; 
alter table F15A1_rfe add updated date ; 
alter table F15A1_rfe add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15A1_rfe_AUD_trig 
before insert or update on F15A1_rfe 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15A1_rtc_seq ; 
create sequence F15A1_rtc_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15A1_rtc_PK_trig 
before insert on F15A1_rtc
for each row 
begin 
select F15A1_rtc_seq.nextval into :new.role_code_id from dual; 
end; 
/
alter table F15A1_rtc add created date ; 
alter table F15A1_rtc add created_by VARCHAR2 (255) ; 
alter table F15A1_rtc add row_version_number integer ; 
alter table F15A1_rtc add updated date ; 
alter table F15A1_rtc add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15A1_rtc_AUD_trig 
before insert or update on F15A1_rtc 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE rfe_task_relationship_seq ; 
create sequence rfe_task_relationship_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger rfe_task_relationship_PK_trig 
before insert on rfe_task_relationship
for each row 
begin 
select rfe_task_relationship_seq.nextval into :new.token_pk from dual; 
end; 
/
alter table rfe_task_relationship add created date ; 
alter table rfe_task_relationship add created_by VARCHAR2 (255) ; 
alter table rfe_task_relationship add row_version_number integer ; 
alter table rfe_task_relationship add updated date ; 
alter table rfe_task_relationship add updated_by VARCHAR2 (255) ; 
/
create or replace trigger rfe_task_relationship_AUD_trig 
before insert or update on rfe_task_relationship 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP INDEX F15A1_emp_emp_id_FK_0 ;
CREATE INDEX F15A1_emp_emp_id_FK_0 ON F15A1_Auth(F15A1_emp_emp_id) ;
DROP INDEX F15A1_emp_emp_id_FK_1 ;
CREATE INDEX F15A1_emp_emp_id_FK_1 ON F15A1_Comment(F15A1_emp_emp_id) ;
DROP INDEX F15A1_rfe_rfe_id_FK_2 ;
CREATE INDEX F15A1_rfe_rfe_id_FK_2 ON F15A1_Comment(F15A1_rfe_rfe_id) ;
DROP INDEX F15A1_Stat_Code_SC_FK_3 ;
CREATE INDEX F15A1_Stat_Code_SC_FK_3 ON F15A1_Hist(F15A1_Stat_Code_SC) ;
DROP INDEX F15A1_emp_emp_id_FK_4 ;
CREATE INDEX F15A1_emp_emp_id_FK_4 ON F15A1_Hist(F15A1_emp_emp_id) ;
DROP INDEX F15A1_rfe_rfe_id_FK_5 ;
CREATE INDEX F15A1_rfe_rfe_id_FK_5 ON F15A1_Hist(F15A1_rfe_rfe_id) ;
DROP INDEX F15A1_emp_emp_id_FK_6 ;
CREATE INDEX F15A1_emp_emp_id_FK_6 ON F15A1_contact(F15A1_emp_emp_id) ;
DROP INDEX F15A1_rfe_rfe_id_FK_7 ;
CREATE INDEX F15A1_rfe_rfe_id_FK_7 ON F15A1_contact(F15A1_rfe_rfe_id) ;
DROP INDEX F15A1_rtc_role_code_id_FK_8 ;
CREATE INDEX F15A1_rtc_role_code_id_FK_8 ON F15A1_contact(F15A1_rtc_role_code_id) ;
DROP INDEX F15A1_rfe_rfe_id_FK_9 ;
CREATE INDEX F15A1_rfe_rfe_id_FK_9 ON F15A1_doc(F15A1_rfe_rfe_id) ;
DROP INDEX F15A1_Auth_auth_id_FK_10 ;
CREATE INDEX F15A1_Auth_auth_id_FK_10 ON F15A1_emp(F15A1_Auth_auth_id) ;
DROP INDEX F15A1_Lab_lab_id_FK_11 ;
CREATE INDEX F15A1_Lab_lab_id_FK_11 ON F15A1_emp(F15A1_Lab_lab_id) ;
DROP INDEX F15A1_Stat_Code_SC_FK_12 ;
CREATE INDEX F15A1_Stat_Code_SC_FK_12 ON F15A1_rfe(F15A1_Stat_Code_SC) ;
DROP INDEX F15A1_rfe_rfe_id_FK_13 ;
CREATE INDEX F15A1_rfe_rfe_id_FK_13 ON rfe_task_relationship(F15A1_rfe_rfe_id) ;
DROP INDEX F15A1_Task_task_id_FK_14 ;
CREATE INDEX F15A1_Task_task_id_FK_14 ON rfe_task_relationship(F15A1_Task_task_id) ;
